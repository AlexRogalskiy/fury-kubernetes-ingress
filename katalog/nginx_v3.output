apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx-single
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount-single
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role-single
  namespace: ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resourceNames:
  - ingress-controller-leader-nginx
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole-single
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding-single
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role-single
subjects:
- kind: ServiceAccount
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding-single
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole-single
subjects:
- kind: ServiceAccount
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
---
apiVersion: v1
data:
  http-redirect-code: "301"
  proxy-body-size: 10m
kind: ConfigMap
metadata:
  labels:
    app: ingress-nginx
  name: nginx-configuration-single
  namespace: ingress-nginx
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-nginx
  name: ingress-nginx-metrics-single
  namespace: ingress-nginx
spec:
  ports:
  - name: metrics
    port: 10254
    targetPort: metrics
  selector:
    app: ingress-nginx
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-nginx
  name: ingress-nginx-single
  namespace: ingress-nginx
spec:
  externalTrafficPolicy: Local
  ports:
  - name: http
    nodePort: 31080
    port: 80
    targetPort: http
  - name: https
    nodePort: 31443
    port: 443
    targetPort: https
  selector:
    app: ingress-nginx
  type: NodePort
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-ingress-controller-single
  namespace: ingress-nginx
spec:
  selector:
    matchLabels:
      app: ingress-nginx
  template:
    metadata:
      labels:
        app: ingress-nginx
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --configmap=$(POD_NAMESPACE)/nginx-configuration
        - --publish-service=$(POD_NAMESPACE)/ingress-nginx
        - --annotations-prefix=nginx.ingress.kubernetes.io
        - --http-port=8080
        - --https-port=8443
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: nginx-ingress-controller
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        - containerPort: 10254
          name: metrics
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsGroup: 33
          runAsNonRoot: true
          runAsUser: 33
      securityContext:
        fsGroup: 33
      serviceAccountName: nginx-ingress-serviceaccount-single
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: k8s
    role: alert-rules
  name: ingress-nginx-k8s-rules-single
  namespace: ingress-nginx
spec:
  groups:
  - name: ingress-nginx.rules
    rules:
    - alert: NginxIngressDown
      annotations:
        doc: This alert fires if Promethes target discovery was not able to reach
          ingress-nginx-metrics in the last 15 minutes.
        message: NGINX Ingress Controller has disapperead from Prometheus target discovery.
      expr: |
        absent(up{job="ingress-nginx-metrics"} == 1)
      for: 15m
      labels:
        severity: critical
    - alert: NginxIngressFailureRate
      annotations:
        doc: This alert fires if the failure rate (the rate of 5xx reponses) measured
          on a time window of 2 minutes was higher than 10% in the last 10 minutes.
        message: NGINX Ingress {{ $labels.ingress }} failure rate is {{ printf "%.2f"
          $value }}%.
      expr: |
        (sum by (ingress) (rate(nginx_ingress_controller_requests{ingress!="", status=~"5[0-9][0-9]"}[2m]))
          /
        sum by (ingress) (rate(nginx_ingress_controller_requests{ingress!=""}[2m]))) * 100 > 10
      for: 10m
      labels:
        severity: critical
    - alert: NginxIngressFailedReload
      annotations:
        doc: This alert fires if the ingress' configuration reload failed in the last
          10 minutes.
        message: Reloading NGINX Ingress' configuration has failed for {{ $labels.namespace
          }}/{{ $labels.pod }}.
      expr: |
        nginx_ingress_controller_config_last_reload_successful{job="ingress-nginx-metrics"} == 0
      for: 10m
      labels:
        severity: warning
    - alert: NginxIngressLatencyTooHigh
      annotations:
        doc: This alert fires if the ingress 99th percentile latency was more than
          5 seconds in the last 10 minutes.
        message: NGINX Ingress {{ $labels.ingress }} 50th percentile response latency
          too high, current value is {{ $value }}s.
      expr: |
        (histogram_quantile(0.50, sum(rate(nginx_ingress_controller_request_duration_seconds_bucket{ingress!=""}[2m])) by (le, ingress))) > 5
      for: 10m
      labels:
        severity: warning
    - alert: NginxIngressLatencyTooHigh
      annotations:
        doc: This alert fires if the ingress 99th percentile latency was more than
          10 seconds in the last 10 minutes.
        message: NGINX Ingress {{ $labels.ingress }} 99th percentile response latency
          too high, current value is {{ $value }}s.
      expr: |
        (histogram_quantile(0.99, sum(rate(nginx_ingress_controller_request_duration_seconds_bucket{ingress!=""}[2m])) by (le, ingress))) > 10
      for: 10m
      labels:
        severity: critical
    - alert: NginxIngressCertificateExpiration
      annotations:
        doc: This alert fires if the certificate for a given host is expiring in less
          than 7 days.
        message: NGINX Ingress certificate for host {{ $labels.host }} is expiring
          in less than 7 days.
      expr: |
        (avg by (host)
          (nginx_ingress_controller_ssl_expire_time_seconds{job="ingress-nginx-metrics"})) < 604800
      labels:
        severity: warning
    - alert: NginxIngressCertificateExpiration
      annotations:
        doc: This alert fires if the certificate for a given host is expiring in less
          than 1 days.
        message: NGINX Ingress certificate for host {{ $labels.host }} is expiring
          in less than 1 days.
      expr: |
        (avg by (host)
          (nginx_ingress_controller_ssl_expire_time_seconds{job="ingress-nginx-metrics"})) < 86400
      labels:
        severity: critical
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: ingress-nginx
  name: ingress-nginx-single
  namespace: ingress-nginx
spec:
  endpoints:
  - interval: 10s
    port: metrics
    scheme: http
  jobLabel: k8s-app
  namespaceSelector:
    matchNames:
    - ingress-nginx
  selector:
    matchLabels:
      app: ingress-nginx
